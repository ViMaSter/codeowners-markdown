import fs from 'node:fs';
import glob from 'glob';
import path from 'path';
import os from 'node:os';

const contentToMarkdown = (fileContent) => {
    // skip lines that start with # or are empty
    // split by \s+
    // take first as key
    // take rest as value
    const lines = fileContent.replace("\n", os.EOL).replace("\r", os.EOL).split(os.EOL);
    const output = lines
        .filter(line => !line.startsWith('#') && line.trim().length > 0)
        .map(line => {
            const [key, ...value] = line.split(/\s+/);
            return `| \`${key}\` | \`${value.map(entry=>entry.trim()).join('`, `')}\` |`;
        });
        output.unshift('| --- | --- |');
        output.unshift('| Files | Owner |')
        return output.join("\n");
};

const autoGeneratedHint = "<!-- !!! THIS FILE IS AUTOGENERATED - DO NOT EDIT IT MANUALLY !!! -->";

const ToHeadlinedMarkdown = 
    (array) => {
        const dynamicContent = array.map(([key, value]) =>
            `## ${key}${os.EOL}${os.EOL}${value}${os.EOL}${os.EOL}`
        ).join("\n");
        return `${autoGeneratedHint}${os.EOL}${autoGeneratedHint}${os.EOL}${autoGeneratedHint}${os.EOL}${os.EOL}${dynamicContent}`;
    };

export default function generate(absoluteSourceDirectoryPath) {
    const __dirname = path.resolve();
    
    // get all CODEOWNERS in path and all subdirectories
    const files = glob.sync('**/CODEOWNERS', { cwd: absoluteSourceDirectoryPath }).sort();
    // assign to object with relative path as key and content as value
    const ownersTableByDirectory = files.map(file => [
        file.replace('/CODEOWNERS', ''),
        contentToMarkdown(fs.readFileSync(path.join(absoluteSourceDirectoryPath, file), 'utf-8'))
    ]);

    return ToHeadlinedMarkdown(ownersTableByDirectory);
}